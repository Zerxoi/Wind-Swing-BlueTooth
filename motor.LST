C51 COMPILER V9.52.0.0   MOTOR                                                             05/17/2017 21:50:30 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN motor.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE motor.c LARGE BROWSE INCDIR(..\Wind Swing) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "motor.h"
   2          #include "pwm.h"
   3          void motor_gpio_config()
   4          {
   5   1        //P02-P07配置为推挽输出模式
   6   1        P0M0&=0x03;
   7   1        P0M0|=0xfc;
   8   1        P0M1&=0x03;
   9   1        P0M1|=0x00;
  10   1        
  11   1        //P20配置为推挽输出模式
  12   1        P2M0&=0xfe;
  13   1        P2M0|=0x01;
  14   1        P2M1&=0xfe;
  15   1        P2M1|=0x00;
  16   1        
  17   1        //P44配置为推挽输出模式
  18   1        P4M0&=0xef;
  19   1        P4M0|=0x10;
  20   1        P4M1&=0xef;
  21   1        P4M1|=0x00;
  22   1      }
  23          
  24          void motor1_forward()
  25          {
  26   1        motor1p=1;
  27   1        motor1n=0;
  28   1      }
  29          
  30          void motor1_stop()
  31          {
  32   1        motor1p=0;
  33   1        motor1n=0;
  34   1      }
  35          
  36          void motor2_forward()
  37          {
  38   1        motor2p=1;
  39   1        motor2n=0;
  40   1      }
  41          
  42          void motor2_stop()
  43          {
  44   1        motor2p=0;
  45   1        motor2n=0;
  46   1      }
  47          
  48          void motor3_forward()
  49          {
  50   1        motor3p=1;
  51   1        motor3n=0;
  52   1      }
  53          
  54          void motor3_stop()
  55          {
C51 COMPILER V9.52.0.0   MOTOR                                                             05/17/2017 21:50:30 PAGE 2   

  56   1        motor3p=0;
  57   1        motor3n=0;
  58   1      }
  59          
  60          void motor4_forward()
  61          {
  62   1        motor4p=1;
  63   1        motor4n=0;
  64   1      }
  65          
  66          void motor4_stop()
  67          {
  68   1        motor4p=0;
  69   1        motor4n=0;
  70   1      }
  71          
  72          void motor_contrl(pid_structdef *pid_structure)
  73          {
  74   1        if (pid_structure->x_output<0)//x轴实际值>设定值 反转
  75   1        {
  76   2          motor1_stop();    //motor1 停止
  77   2          motor2_forward(); //motor2 正转
  78   2          if (pid_structure->x_output<-6000)//PWM超出最大值(电机电压不要超出6v)
  79   2            PWM4T2=6000;
  80   2          else if (pid_structure->x_output>-1)
  81   2            PWM4T2=1;
  82   2          else
  83   2            PWM4T2=(long int)(-1*pid_structure->x_output);//motor2 PWM
  84   2        }
  85   1        else//x轴 实际值<设定值
  86   1        {
  87   2          motor1_forward(); //motor1 正转
  88   2          motor2_stop();    //motor2 停止
  89   2          if (pid_structure->x_output>6000)//PWM超出最大值(电机电压不要超出6v)
  90   2            PWM5T2=6000;
  91   2          else if (pid_structure->x_output<1)
  92   2            PWM5T2=1;
  93   2          else
  94   2            PWM5T2=(long int)(pid_structure->x_output);//motor1 PWM
  95   2        }
  96   1        
  97   1        if (pid_structure->y_output<0)//y轴 实际值>设定值 反转
  98   1        {
  99   2          motor3_stop();    //motor3 停止
 100   2          motor4_forward(); //motor4 正转
 101   2          if (pid_structure->y_output<-6000)//PWM超出最大值(电机电压不要超出6v)
 102   2            PWM2T2=6000;
 103   2          else if (pid_structure->y_output>-1)
 104   2            PWM2T2=1;
 105   2          else
 106   2            PWM2T2=(int)(-1*pid_structure->y_output);//motor4 PWM输出
 107   2        }
 108   1        else//y轴 实际值<设定值 正转
 109   1        {
 110   2          motor3_forward(); //motor3 正转
 111   2          motor4_stop();    //motor4 停止
 112   2          if (pid_structure->y_output>6000)//PWM超出最大值(电机电压不要超出6v)
 113   2            PWM3T2=6000;
 114   2          else if (pid_structure->y_output<1)
 115   2            PWM3T2=1;
 116   2          else
 117   2            PWM3T2=(long int)(pid_structure->y_output);//motor3 PWM输出
C51 COMPILER V9.52.0.0   MOTOR                                                             05/17/2017 21:50:30 PAGE 3   

 118   2        }
 119   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    594    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
